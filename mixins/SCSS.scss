//- Mixins in SASS take a functional approach to generate content. They are passed before the SASS file is compiled to css

//create variable
$blue : blue;

//create mixin
@mixin cssProperties($arg1, $arg2) { //add args
      //apply inheritance
      #main {
            color: $arg1;
            line-height: 2px;
            font-style: italic;
            list-style: $arg2;
      }
}

//mixin for box shadow
@mixin boxShadow($shadow...) {
      -webkit-box-shadow: $shadow;
      -moz-box-shadow: $shadow;
      -o-box-shadow: $shadow;
      box-shadow: $shadow;
}

//mixin for animation
@mixin keyframes($name) {
      @-webkit-keyframes #{ $name } { //call variable/arg
            //set the content to be passed here
            @content;
      }
      @-moz-keyframes #{ $name } {
            @content;
      }
      @-o-keyframes #{ $name } {
            @content;
      }
      @keyframes #{ $name } {
            @content;
      }
}


body {
      //call mixin method
      @include cssProperties($blue, none);
      font-weight: bold;
      //call boxShadow mixin
      @include boxShadow(1px 2px 3px rgba(0,0,0,.3), 4px 2px 2px 2px gray) //you can pass multiple values, however to add a second block of data you must spread ...
}


////////////////////////////////////////////// Exported Code ///////////////////////////////////////////////////////
//
///*body {
//
//      color:green;
//      width:200px;
//      @include boxShadow( 1px 2px 3px rgba(0,0,0,.3) , 4px 4px 2px gray );
//
//      @include cssProperties( $color, 2.6 );
//}*/

//call mixin for animation
@include keyframes(myAnim) {
      //define the content to be passed here
      // this will be inserted wherever a @content was passed
      0% { opacity: 0 }
      100% { opacity: 1 }
};
